package main

import (
	"fmt"
	"math/rand"
)

func main() {
	arr := []int{4, 1, 7, 2, 8, 5, 9, 7, 6, 3, 0, 7}
	fmt.Println(quicksort(arr))
}

// сортирует массив по неубыванию
func quicksort(a []int) []int { // на вход - исходный массив, на выходе - отсортированный
	if len(a) < 2 { // если массив состоит из 1-го элемента - он УЖЕ отсортирован
		return a // возвращаем его
	}

	left, right := 0, len(a)-1 // left и right хранят индексы 1-го и последнего элементов массива

	pivot := rand.Int() % len(a) // определяем случайный опорный элемент (в pivot - его индекс)

	a[pivot], a[right] = a[right], a[pivot] // ставим опорный элемент в конец массива

	for i, _ := range a {
		if a[i] < a[right] {
			a[left], a[i] = a[i], a[left] // при завершении цикла получится, что все элементы, которые меньше опорного окажутся
			// условно слева, те что больше - справа
			left++ // смещаем начало на один элемент вправо, если произошла перестановка
		} //
	}

	a[left], a[right] = a[right], a[left] // перемещаем значение опорного эл-та туда, где слева все эл-ты меньше его, справа - больше

	quicksort(a[:left])   // рекурсивно вызываем quicksort для части массива, которая МЕНЬШЕ опорного эл-та
	quicksort(a[left+1:]) // рекурсивно вызываем quicksort для части массива, которая БОЛЬШЕ опорного эл-та

	return a
}
